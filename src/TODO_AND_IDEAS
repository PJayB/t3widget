TODO
====

High Priority
-------------
- perhaps it is a good idea to let the user define short-cuts for things
	like calling the insert_char_dialog. Forcing F9 may not be a great idea.
	On the other hand, enforcing a standard can also be good. There are only
	two widgets (currently) for which this makes sense: text_field_t and
	edit_window_t. But they should share the same shortcut.
- handle FIXME's
- dialogs need to be notified of color change and then call force_redraw. Best
	done by connecting to signal from constructor and calling disconnect on
	connection in destructor
- remove all commented code

Low Priority
------------
- use a line_factory_t for the text_buffer_t, such that lines with extensions
	for e.g. syntax highlighting can be created. Also needed for text_buffer_t
	itself for the edit_window_t
- much of the widget and dialog interfaces should be made virtual to allow
	proper overriding
- many widgets can be made aggregated types, rather than pointers. This does
	mean calling the constructor from the initializer list.
- the current content list stuff and file_pane_t interface are messy. This
	definately needs more work.
- dialog destructors must be tested. With the constructors of the different
	widgets being called separately, we have to make sure we delete all of them
	even if the constructor is stopped half way.
- Allow the text_window_t to be set to read-only mode. This way it can also be
	used for just displaying text (perhaps the bottom line should also be
	disabled for that use)

New Functionality
-----------------
- add a suspend and resume call, much like we implemented it in tilde/edit.
- create a dialog which shows the message about the key timeout vs. waiting for
	key thing.

IDEAS
=====
- we won't do layout management. For most things the anchoring does what we
	want. Furthermore, most dialogs don't resize also because the user can not
	resize windows. So for those few cases where we do actually need it, the
	programmer can do it by overriding the set_size() call.
- adding key-bindings can be done through deriving from a class and
	overriding process_key
- For creating a signal that goes through the slots, but stops if one returns
	true, see here (may be usefull for hotkey bindings):
	http://library.gnome.org/devel/libsigc++/stable/classsigc_1_1signal_1_1accumulated.html
- From the wikipedia page on Specials (including the replacement character):
	A better (but harder to implement) design is to preserve the original bytes,
	including the error, and only convert to the replacement when displaying the
	text. Another alternative is to make different replacements for each
	different error byte; one popular replacement is the (otherwise invalid
	Unicode) U+DC80 through U+DCFF.
