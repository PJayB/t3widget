TODO
- restructure the code. There is lots of code in places that it should not be.
	First thing to do is to define how it should be...
	- figure out how to bind a key to the menu functionality (F10 in tilde).
		To some extent this can be left to the user, as the most common place
		for the menu bar is the main window anyway, which has to be overriden
		anyway.
	- adding key-bindings can be done through deriving from a class and
		overriding process_key
	- perhaps it is a good idea to let the user define short-cuts for things
		like calling the insert_char_dialog. Forcing F9 may not be a great idea.
		On the other hand, enforcing a standard can also be good.

	- TextFile should be renamed TextBuffer and be put in a file named
		textbuffer.cc/h
	- lines.cc/h should be renamed line.cc/h
- put everything in a namespace (t3 sounds about right, or maybe even
	t3::widget or t3widget::)
- figure out which dialogs should be included as defaults, and which should be
	part of tilde/edit
- add a test program to check if everything works
- figure out how to get rid of the bullet_status_t interface
- rename the multi_string_list_i interface to something ending in _t
- how should the notification of the resize operation work? Even for the
	main_window the size may be known, but not how the widgets on it should be
	resized. So just calling resize on it is probably not such a good idea.
- create a single header file to be included by users of the library.
	Furthermore, the library should have its own header file which provides
	all the other needed functionality (such as "using namespace std")
- rename main_window_t
- remove anything not related to the external interface from the externally
	used header files

IDEAS
- use a line_factory_t for the text_buffer_t, such that lines with extensions
	for e.g. syntax highlighting can be created.
- many widgets can be made aggregated types, rather than pointers. This does
	mean calling the constructor from the initializer list.

THOUGHTS
- we won't do layout management. For most things the anchoring does what we
	want. Furthermore, most dialogs don't resize also because the user can not
	resize windows. So for those few cases where we do actually need it, the
	programmer can do it by overriding the set_size() call.
