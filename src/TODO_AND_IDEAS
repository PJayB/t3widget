- restructure the code. There is lots of code in places that it should not be.
	First thing to do is to define how it should be...
	- widget constructor should have parent and dimension args, such that it can
		create the window itself. (Probably keep the current constructor for
		widgets that do special stuff in the constructor)
	- figure out what to do with the menu. Should that be a normal widget, and
		how should the keys be handled? [yes it should be a normal widget and
		handling keys can be done through the is_hotkey function]
	- adding key-bindings can be done through deriving from a class and
		overriding process_key
	- perhaps it is a good idea to let the user define short-cuts for things
		like calling the insert_char_dialog. Forcing F9 may not be a great idea.
		On the other hand, enforcing a standard can also be good.
- is it possible to use some sort of layouting management. Either as a separate
	object, or by allowing two anchors. The latter sounds easy enough to
	implement and seems flexible enough to do what we want. However, it does
	not allow things like splitting a screen in half. But that may be possible
	by using special container components which do just that.
- put everything in a namespace (t3 sounds about right, or maybe even
	t3::widget or t3_widget::)
- figure out which dialogs should be included as defaults, and which should be
	part of tilde/edit
- move the casefolding stuff into libt3unicode
- refine the editwindow/file/line stuff into an edit widget
- add a test program to check if everything works
- figure out how to get rid of the bullet_status_t interface
- rename the multi_string_list_i interface to something ending in _t
- how should the notification of the resize operation work? Even for the
	main_window the size may be known, but not how the widgets on it should be
	resized. So just calling resize on it is probably not such a good idea.
- create a single header file to be included by users of the library.
	Furthermore, the library should have its own header file which provides
	all the other needed functionality (such as "using namespace std")
- the current implementation of parents inside the window library is not
	intuitive. Using a subdepth attribute does not work well with arbitrarily
	nested windows.
