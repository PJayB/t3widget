# Copyright (C) 2011 G.P. Halkes
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

EXTENSIONS="cxx libtoolcxx pkgconfig verbose_compile pkgconfig_dep gettext x11"
LTSHARED=1
DEFAULT_LINGUAS=nl
INSTALLDIRS="libdir docdir includedir"


test_select() {
	DESC="$1"
	shift
	clean_cxx
	for HEADER in "$@"
	do
		echo "#include <${HEADER}>"
	done > .configcxx.cc
	cat >> .configcxx.cc <<EOF
#include <stdlib.h>

int main(int argc, char *argv[]) {
	fd_set test;
	FD_ZERO(&test);
	FD_SET(0, &test);
	if (FD_ISSET(0, &test))
		FD_CLR(0, &test);
	select(1, &test, NULL, NULL, NULL);
	return 0;
}
EOF
	test_link_cxx "${DESC}"
}

checkfunction_internal() {
	clean_cxx

	FUNC="$1"
	CHECKFOR="$2"
	CODE="$3"
	shift 3
	{
		for INCLUDE
		do
			echo "#include ${INCLUDE}"
		done
		cat <<EOF
int main(int argc, char *argv[]) {
	${CODE}
	return 0;
}
EOF
	} > .configcxx.cc

	"${FUNC}" "${CHECKFOR}"
}

checkfunction() {
	checkfunction_internal test_link_cxx "$@"
}
checkfunction_compile() {
	checkfunction_internal test_compile_cxx "$@"
}

# Make these functions available for the gettext extension
test_link() {
	mv .config.c .configcxx.cc
	test_link_cxx "$@"
}

test_compile() {
	test_compile_cxx "$@"
}

clean_c() {
	clean .config.c
	clean_cxx
}

config() {
	clean_cxx
	cat > .configcxx.cc <<EOF
#include <sigc++/sigc++.h>
sigc::connection conn;
sigc::signal<void, int> sig;

void f(int x) { x++; }

int main(int argc, char *argv[]) {
	conn = sig.connect(sigc::ptr_fun(f));
	return 0;
}
EOF
	pkgconfig sigc++-2.0 LIBSIGCPP test_link_cxx || \
		error "!! Can not find libsigc++-2.0. libsigc++-2.0 is required to compile libt3widget."

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <transcript/transcript.h>

int main(int argc, char *argv[]) {
	transcript_get_version();
	return 0;
}
EOF
	pkgconfig libtranscript/0.2 LIBTRANSCRIPT test_link_cxx || \
		error "!! Can not find libtranscript. libtranscript is required to compile libt3widget."

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <unictype.h>
#include <unicase.h>

int main(int argc, char *argv[]) {
	uint8_t buffer[10];
	size_t buffer_size = sizeof(buffer);
	size_t out_size;
	char nul = 0;

	u8_casefold(buffer, buffer_size, NULL, NULL, NULL, &out_size);
	uc_is_general_category_withtable(0x1234, UC_CATEGORY_MASK_Zs);
	uc_is_property_id_continue(0x1234);

	return 0;
}
EOF
	test_link_cxx "libunistring" "TESTLIBS=-lunistring" || \
		error "!! Can not find libunistring library. Libunistring is required to compile libt3window."

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <t3window/window.h>
#include <t3window/terminal.h>

int main(int argc, char *argv[]) {
	t3_window_get_version();
	return 0;
}
EOF
	pkgconfig libt3window/0.1.4 LIBT3WINDOW test_link_cxx || \
		error "!! Can not find libt3window. libt3window is required to compile libt3widget."

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <t3key/key.h>

int main(int argc, char *argv[]) {
	t3_key_get_version();
	return 0;
}
EOF
	pkgconfig libt3key/0.1.3 LIBT3KEY test_link_cxx || \
		error "!! Can not find libt3key. libt3key is required to compile libt3widget."

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <pcre.h>

int callout(pcre_callout_block *block) { (void) block; return 0; }

int main(int argc, char *argv[]) {
	const char *err;
	int err_offset;
	pcre *pcre = pcre_compile("pattern", PCRE_UTF8 | PCRE_CASELESS, &err, &err_offset, NULL);
	pcre_callout = callout;
	return 0;
}
EOF

	pkgconfig libpcre LIBPCRE test_link_cxx || {
		check_message "Checking for pcre-config..."
		echo "Running: pcre-config --cflags" >> config.log
		if pcre-config --cflags >> config.log 2>&1 ; then
			check_message_result "yes"
			if test_link_cxx "libpcre compile" "TESTFLAGS=`pcre-config --cflags`" "TESTLIBS=`pcre-config --libs`" ; then
				LIBPCRE_FLAGS="`pcre-config --cflags`"
				LIBPCRE_LIBS="`pcre-config --libs`"
				true
			fi
		else
			check_message_result "no"
			false
		fi
	} || \
	error "!! Can not find libpcre. libpcre is required to compile libt3widget."

	if test_select "select in <sys/select.h>" "sys/select.h" ; then
		CONFIGFLAGS="${CONFIGFLAGS} -DHAS_SELECT_H"
	else
		test_select "select in <unistd.h>" "sys/time.h" "sys/types.h" "unistd.h" || error "!! Can not find required select function."
	fi

	clean_cxx
	unset PTHREADFLAGS PTHREADLIBS
	cat > .configcxx.cc <<EOF
#include <stdlib.h>
#include <pthread.h>
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t cond;
pthread_t thread;

void *thread_func(void *) {
	return NULL;
}

int main(int argc, char *argv[]) {
	void *result;
	pthread_mutex_init(&mutex, NULL);
	pthread_cond_init(&cond, NULL);
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	pthread_cond_signal(&cond);
	pthread_cond_wait(&cond, &mutex);
	pthread_mutex_destroy(&mutex);
	pthread_cond_destroy(&cond);
	pthread_create(&thread, NULL, thread_func, NULL);
	pthread_join(thread, &result);
	pthread_cancel(thread);
	return 0;
}
EOF
	test_compile_cxx "pthreads" || {
		if checkfunction_compile "pthread.h" "" "<pthread.h>" ; then
			check_message_result "Testing required functions seperatly for debugging purposes"

			clean_cxx
			cat > .configcxx.cc <<EOF
#include <stdlib.h>
#include <pthread.h>
pthread_t thread;
void *thread_func(void *) {
	return NULL;
}
int main(int argc, char *argv[]) {
	pthread_create(&thread, NULL, thread_func, NULL);
}
EOF
			test_compile_cxx "pthread_create"
			checkfunction_compile "pthread static mutex initializer" "pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;" "<pthread.h>"
			checkfunction_compile "pthread_mutex_init" 'pthread_mutex_t mutex; pthread_mutex_init(&mutex, NULL);' "<stdlib.h>" "<pthread.h>"
			checkfunction_compile "pthread_mutex_destroy" 'pthread_mutex_t mutex; pthread_mutex_destroy(&mutex);' "<pthread.h>"
			checkfunction_compile "pthread_mutex_lock" 'pthread_mutex_t mutex; pthread_mutex_lock(&mutex);' "<pthread.h>"
			checkfunction_compile "pthread_mutex_unlock" 'pthread_mutex_t mutex; pthread_mutex_unlock(&mutex);' "<pthread.h>"
			checkfunction_compile "pthread_cond_init" 'pthread_cond_t cond; pthread_cond_init(&cond, NULL);' "<stdlib.h>" "<pthread.h>"
			checkfunction_compile "pthread_cond_destroy" 'pthread_cond_t cond; pthread_cond_destroy(&cond);' "<pthread.h>"
			checkfunction_compile "pthread_cond_signal" 'pthread_cond_t cond; pthread_cond_signal(&cond);' "<pthread.h>"
			checkfunction_compile "pthread_cond_wait" 'pthread_mutex_t mutex; pthread_cond_t cond; pthread_cond_wait(&cond, &mutex);' "<pthread.h>"
			checkfunction_compile "pthread_join" 'pthread_t thread; void *result; pthread_join(thread, &result);' "<pthread.h>"
			checkfunction_compile "pthread_cancel" 'pthread_t thread; pthread_cancel(thread);' "<pthread.h>"
		fi
		error "!! Pthreads are required to compile libt3widget. See config.log for compile details."
	}
	test_compile_cxx "-pthread flag" && PTHREADFLAGS=-pthread
	# Libtool sometimes adds -nostdlib, which then requires that -lpthread is specified
	# separately. Therefore, we first test for -pthread -lpthread, then for
	# -pthread, then -lpthread and if all else fails without anything
	if [ -n "${PTHREADFLAGS}" ] && test_link_cxx "pthreads in ${PTHREADFLAGS} -lpthread" "TESTLIBS=${PTHREADFLAGS} -lpthread" ; then
		PTHREADLIBS="${PTHREADFLAGS} -lpthread"
	elif [ -n "${PTHREADFLAGS}" ] && test_link_cxx "pthreads in ${PTHREADFLAGS}" "TESTLIBS=${PTHREADFLAGS}" ; then
		PTHREADLIBS="${PTHREADFLAGS}"
	elif test_link_cxx "pthreads in -lpthread" TESTLIBS=-lpthread ; then
		PTHREADLIBS=-lpthread
	elif test_link_cxx "pthreads in standard library" "TESTLIBS=" ; then
		:
	else
		error "!! Can not find required linker flags for pthreads. Pthreads are required to compile libt3widget. See config.log for compile details."
	fi

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <sched.h>
#include <pthread.h>

int main(int argc, char *argv[]) {
	struct sched_param sched_param;
	pthread_t thread;
	sched_param.sched_priority = sched_get_priority_max(SCHED_FIFO);
	pthread_setschedparam(thread, SCHED_FIFO, &sched_param);
	return 0;
}
EOF
	test_link_cxx "scheduling priority functions" && CONFIGFLAGS="${CONFIGFLAGS} -DHAS_SCHED_FUNCS"

	cat > .configcxx.cc <<EOF
#include <math.h>
int main(int argc, char *argv[]) {
	ceil((double) argc);
	return 0;
}
EOF
	test_link_cxx "ceil in standard library" || {
		if test_link_cxx "ceil in -lm" TESTLIBS=-lm ; then
			CONFIGLIBS="${CONFIGLIBS} -lm"
		else
			error "!! Can not find required linker flags for ceil function. See config.log for details."
		fi
	}

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <stdlib.h>
#include <stdio.h>
#include <signal.h>
#include <fnmatch.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <unistd.h>
#include <dirent.h>
int main(int argc, char *argv[]) {
	struct sigaction sa;
	struct stat statbuf;
	int fds[2];
	char buffer[100];
	DIR *dir;
	struct dirent *entry;
	struct timeval tv;
	sigemptyset(&sa.sa_mask);
	sigaddset(&sa.sa_mask, SIGWINCH);
	sigaction(SIGWINCH, &sa, NULL);
	sigprocmask(SIG_UNBLOCK, &sa.sa_mask, NULL);
	fnmatch("a", "b", 0);
	stat("file", &statbuf);
	pipe(fds);
	close(fds[0]);
	read(fds[0], buffer, sizeof(buffer));
	write(fds[0], buffer, sizeof(buffer));
	snprintf(buffer, sizeof(buffer), "foo");
	kill(0, SIGWINCH);
	getpid();
	dir = opendir("foo");
	entry = readdir(dir);
	closedir(dir);
	getcwd(buffer, sizeof(buffer));
	gettimeofday(&tv, NULL);
	return 0;
}
EOF
	test_link_cxx "other required common Un*x functions" || {
		check_message_result "Testing required functions seperatly for debugging purposes"

		checkfunction "sigemptyset" "struct sigaction sa; sigemptyset(&sa.sa_mask);" "<signal.h>"
		checkfunction "sigaddset" "struct sigaction sa; sigaddset(&sa.sa_mask, SIGWINCH);" "<signal.h>"
		checkfunction "sigaction" "struct sigaction sa; sigaction(SIGWINCH, &sa, NULL);" "<stdlib.h>" "<signal.h>"
		checkfunction "sigprocmask" "struct sigaction sa; sigprocmask(SIG_UNBLOCK, &sa.sa_mask, NULL);" "<stdlib.h>" "<signal.h>"
		checkfunction "fnmatch" 'fnmatch("a", "b", 0);' "<fnmatch.h>"
		checkfunction "stat" 'struct stat statbuf; stat("file", &statbuf);' "<sys/types.h>" "<sys/stat.h>" "<unistd.h>"
		checkfunction "pipe" 'int fds[2]; pipe(fds);' "<unistd.h>"
		checkfunction "close" 'int fd; close(fd);'  "<unistd.h>"
		checkfunction "read" 'char buffer[100]; int fd; read(fd, buffer, sizeof(buffer));' "<unistd.h>"
		checkfunction "write" 'char buffer[100]; int fd; read(fd, buffer, sizeof(buffer));' "<unistd.h>"
		checkfunction "snprintf" 'char buffer[100]; snprintf(buffer, sizeof(buffer), "foo");' "<stdio.h>"
		checkfunction "kill" 'kill(0, SIGWINCH);' "<sys/types.h>" "<signal.h>"
		checkfunction "getpid" 'getpid();' "<sys/types.h>" "<unistd.h>"
		checkfunction "opendir" 'DIR *dir = opendir("foo");' "<sys/types.h>" "<dirent.h>"
		checkfunction "readdir" 'DIR *dir; struct dirent *entry = readdir(dir);' "<sys/types.h>" "<dirent.h>"
		checkfunction "closedir" 'DIR *dir; closedir(dir);'  "<sys/types.h>" "<dirent.h>"
		checkfunction "getcwd" 'char buffer[100]; getcwd(buffer, sizeof(buffer));' "<unistd.h>"
		checkfunction "gettimeofday" 'struct timeval tv; gettimeofday(&tv, NULL);' "<sys/time.h>"
		error "!! A required Un*x function was not found. See config.log for details."
	}

	clean_cxx
	cat > .configcxx.cc <<EOF
#include <string.h>

int main(int argc, char *argv[]) {
	strdup(argv[0]);
	return 0;
}
EOF
	test_link_cxx "strdup" && CONFIGFLAGS="${CONFIGFLAGS} -DHAS_STRDUP"
	unset X11OBJECTS
	if basic_x11 ; then
		CONFIGFLAGS="$CONFIGFLAGS -DWITH_X11"
		X11OBJECTS=x11.o
	fi

	create_makefile "CONFIGFLAGS=${CONFIGFLAGS} ${LIBSIGCPP_FLAGS} ${LIBTRANSCRIPT_FLAGS} \
		${LIBT3KEY_FLAGS} ${LIBT3WINDOW_FLAGS} ${LIBPCRE_FLAGS} ${PTHREADFLAGS} ${X11_FLAGS}" \
		"CONFIGLIBS=${CONFIGLIBS} ${LIBSIGCPP_LIBS} ${LIBTRANSCRIPT_LIBS} -lunistring \
		${LIBT3KEY_LIBS} ${LIBT3WINDOW_LIBS} ${LIBPCRE_LIBS} ${PTHREADLIBS} ${X11_LIBS}" \
		"X11OBJECTS=${X11OBJECTS}"
}
